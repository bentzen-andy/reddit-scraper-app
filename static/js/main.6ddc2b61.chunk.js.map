{"version":3,"sources":["components/Navbar.module.css","components/SearchBar.module.css","components/PopularSearchList.module.css","UI/Button.module.css","components/heatmap/GridSquare.module.css","components/Instructions.module.css","components/Navbar.js","components/Instructions.js","UI/Button.js","components/SearchBar.js","hooks/useScreenSize.js","components/heatmap/GridSquare.js","components/heatmap/HeatmapLandscapeStyle.js","components/heatmap/HeatmapPortraitStyle.js","components/heatmap/RedditDataList.js","http-requests/FetchHeatmap.js","components/PopularSearchList.js","http-requests/FetchPopularSearches.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Navbar","className","styles","href","Instructions","Button","props","cssClasses","onClick","btnText","SearchBar","useState","subreddit","setSubreddit","onSubmit","event","preventDefault","toLowerCase","trim","htmlFor","type","id","name","placeholder","value","onChange","target","getScreenSize","window","width","innerWidth","height","innerHeight","useScreenSize","screenSize","setScreenSize","useEffect","handleResize","addEventListener","removeEventListener","GridSquare","postScore","numPosts","maxDailyPosts","Math","round","color","HeatmapLandscapeStyle","dayHour","week","cellSpacing","cellPadding","border","map","days","i","day","j","HeatmapPortraitStyle","screenWidth","hourDay","Array","length","fill","invertDayHour","hours","hour","RedditDataList","push","data","item","parseInt","defineDayHourData","flat","reduce","a","b","max","FetchHeatmap","redditSubmissions","setRedditSubmissions","isLoading","setIsLoading","error","setError","clientTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","clientLocale","locale","fetch","then","response","json","redditData","children","postCreationDate","Date","created_utc","upvote_ratio","unix_time","getDay","date","toLocaleString","split","time","hour12","sort","a_1","b_1","a_2","b_2","catch","err","method","body","JSON","stringify","count","headers","PopularSearchList","FetchPopularSearches","popularSearches","setPopularSearches","subreddits","Object","entries","currSub","currCnt","splice","App","sub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ddc2b61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__31-FB\",\"navbar__logo\":\"Navbar_navbar__logo__2ou9Y\",\"navbar__title\":\"Navbar_navbar__title__3-7CC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar__label\":\"SearchBar_searchbar__label__1aEKd\",\"searchbar__input\":\"SearchBar_searchbar__input__1UQUp\",\"searchbar__btn\":\"SearchBar_searchbar__btn__9s5ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popular-search-list\":\"PopularSearchList_popular-search-list__1c3Fc\",\"popular-search-list__heading\":\"PopularSearchList_popular-search-list__heading__35FaZ\",\"popular-search-list__subreddit\":\"PopularSearchList_popular-search-list__subreddit__1gELa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__Liofu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid-square\":\"GridSquare_grid-square__cQ_Rq\",\"color-1\":\"GridSquare_color-1__2AOH0\",\"color-2\":\"GridSquare_color-2__3f6Tx\",\"color-3\":\"GridSquare_color-3__E6IfZ\",\"color-4\":\"GridSquare_color-4__1mIqN\",\"color-5\":\"GridSquare_color-5__2eI04\",\"color-6\":\"GridSquare_color-6__3aZJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"instructions\":\"Instructions_instructions__1imUA\"};","import React from \"react\";\nimport styles from \"./Navbar.module.css\";\n\nconst Navbar = () => {\n  return (\n    <div className={styles[\"navbar\"]}>\n      <div className={styles[\"navbar__logo\"]}>\n        <a href=\"/\">[LOGO]</a>\n      </div>\n      <div className={styles[\"navbar__title\"]}>Reddit Scraper App</div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styles from \"./Instructions.module.css\";\n\nconst Instructions = () => {\n  return (\n    <div className={styles[\"instructions\"]}>\n      Search for your favorite subreddit below to find the best times to post.\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport styles from \"./Button.module.css\";\n\nconst Button = (props) => {\n  const cssClasses = props.className\n    ? `${props.className} ${styles[\"btn\"]}`\n    : styles[\"btn\"];\n\n  return (\n    <button className={cssClasses} onClick={props.onClick}>\n      {props.btnText}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport styles from \"./SearchBar.module.css\";\n\nconst SearchBar = (props) => {\n  const [subreddit, setSubreddit] = useState(\"\");\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onSubmit(subreddit.toLowerCase().trim());\n    setSubreddit(\"\");\n  };\n\n  const subredditChangeHandler = (event) => {\n    setSubreddit(event.target.value);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <label className={styles[\"searchbar__label\"]} htmlFor=\"subreddit\">\n        www.reddit.com/r/\n      </label>\n      <input\n        className={styles[\"searchbar__input\"]}\n        type=\"text\"\n        id=\"subreddit\"\n        name=\"subreddit\"\n        placeholder=\"askreddit\"\n        value={subreddit}\n        onChange={subredditChangeHandler}\n      />\n      <Button\n        className={styles[\"searchbar__btn\"]}\n        btnText=\"Submit\"\n        type=\"submit\"\n      />\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import { useState, useEffect } from \"react\";\n\nconst getScreenSize = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nconst useScreenSize = () => {\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n\n  useEffect(() => {\n    function handleResize() {\n      setScreenSize(getScreenSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nexport default useScreenSize;\n","import React from \"react\";\nimport styles from \"./GridSquare.module.css\";\n\nconst GridSquare = (props) => {\n  let postScore = props.numPosts / 1.0;\n  postScore = (postScore / props.maxDailyPosts) * 6;\n  postScore = postScore < 1 && postScore > 0 ? 1 : postScore;\n  postScore = Math.round(postScore);\n  const color = `color-${postScore}`;\n\n  return (\n    <td className={`${styles[\"grid-square\"]} ${styles[color]}`}>\n      {props.numPosts === 0 ? \"-\" : props.numPosts}\n    </td>\n  );\n};\n\nexport default GridSquare;\n","import React from \"react\";\nimport GridSquare from \"./GridSquare\";\n\nconst HeatmapLandscapeStyle = ({ dayHour, maxDailyPosts }) => {\n  const week = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  return (\n    <div>\n      <table cellSpacing=\"0\" cellPadding=\"0\" border=\"0\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>\n              <div>12</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>1</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>2</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>3</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>4</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>5</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>6</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>7</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>8</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>9</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>10</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>11</div>\n              <div>AM</div>\n            </th>\n            <th>\n              <div>12</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>1</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>2</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>3</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>4</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>5</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>6</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>7</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>8</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>9</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>10</div>\n              <div>PM</div>\n            </th>\n            <th>\n              <div>11</div>\n              <div>PM</div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {dayHour.map((days, i) => (\n            <tr key={i}>\n              <td>{week[i]}</td>\n              {days.map((day, j) => (\n                <GridSquare\n                  key={j}\n                  numPosts={day}\n                  maxDailyPosts={maxDailyPosts}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default HeatmapLandscapeStyle;\n","import React from \"react\";\nimport GridSquare from \"./GridSquare\";\n\nconst HeatmapPortraitStyle = ({ dayHour, screenWidth, maxDailyPosts }) => {\n  const invertDayHour = (dayHour) => {\n    let hourDay = new Array(24);\n    for (let i = 0; i < hourDay.length; i++) {\n      hourDay[i] = new Array(7).fill(0);\n    }\n\n    for (let i = 0; i < hourDay.length; i++) {\n      for (let j = 0; j < hourDay[i].length; j++) {\n        hourDay[i][j] = dayHour[j][i];\n      }\n    }\n\n    return hourDay;\n  };\n\n  const hourDay = invertDayHour(dayHour);\n\n  const getDaysOfWeek = () => {\n    if (screenWidth >= 480) {\n      return (\n        <tr>\n          <th></th>\n          <th>Sun</th>\n          <th>Mon</th>\n          <th>Tue</th>\n          <th>Wed</th>\n          <th>Thr</th>\n          <th>Fri</th>\n          <th>Sat</th>\n        </tr>\n      );\n    } else {\n      return (\n        <tr>\n          <th></th>\n          <th>S</th>\n          <th>M</th>\n          <th>T</th>\n          <th>W</th>\n          <th>T</th>\n          <th>F</th>\n          <th>S</th>\n        </tr>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <table cellSpacing=\"0\" cellPadding=\"0\" border=\"0\">\n        <thead>{getDaysOfWeek()}</thead>\n        <tbody>\n          {hourDay.map((hours, i) => (\n            <tr key={i}>\n              <td>\n                {i % 12 === 0 ? 12 : i % 12} {i < 12 ? \"AM\" : \"PM\"}\n              </td>\n              {hours.map((hour, j) => (\n                <GridSquare\n                  key={j}\n                  numPosts={hour}\n                  maxDailyPosts={maxDailyPosts}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default HeatmapPortraitStyle;\n","import React, { useEffect } from \"react\";\nimport useScreenSize from \"../../hooks/useScreenSize\";\nimport HeatmapLandscapeStyle from \"./HeatmapLandscapeStyle\";\nimport HeatmapPortraitStyle from \"./HeatmapPortraitStyle\";\n\nconst RedditDataList = (props) => {\n  const { height, width } = useScreenSize();\n\n  const defineDayHourData = () => {\n    let dayHour = [];\n    for (let i = 0; i < 7; i++) {\n      dayHour.push(new Array(24).fill(0));\n    }\n\n    for (const item of props.data) {\n      if (item.day === 0) dayHour[0][parseInt(item.hour, 10)]++;\n      else if (item.day === 1) dayHour[1][parseInt(item.hour, 10)]++;\n      else if (item.day === 2) dayHour[2][parseInt(item.hour, 10)]++;\n      else if (item.day === 3) dayHour[3][parseInt(item.hour, 10)]++;\n      else if (item.day === 4) dayHour[4][parseInt(item.hour, 10)]++;\n      else if (item.day === 5) dayHour[5][parseInt(item.hour, 10)]++;\n      else if (item.day === 6) dayHour[6][parseInt(item.hour, 10)]++;\n    }\n    return dayHour;\n  };\n\n  const getMax = (arr2D) => {\n    return arr2D.flat().reduce((a, b) => Math.max(a, b), 0);\n  };\n\n  const dayHour = defineDayHourData();\n  const maxDailyPosts = getMax(dayHour);\n\n  // every time the screen size changes (e.g., user rotates iPad), check\n  // if screen is landscape or portrait and adjust heatmap table accordingly\n  useEffect(() => {\n    if (!props.data || props.data.length === 0) return <p>No data...</p>;\n    if (width > height) return <HeatmapLandscapeStyle dayHour={dayHour} max={maxDailyPosts} />;\n    else return <HeatmapPortraitStyle dayHour={dayHour} screenWidth={width} maxDailyPosts={maxDailyPosts} />;\n  }, [height, width, dayHour, props.data, maxDailyPosts]);\n\n  if (!props.data || props.data.length === 0) return <p>No data...</p>;\n  if (width > height) return <HeatmapLandscapeStyle dayHour={dayHour} maxDailyPosts={maxDailyPosts} />;\n  else return <HeatmapPortraitStyle dayHour={dayHour} screenWidth={width} maxDailyPosts={maxDailyPosts} />;\n};\n\nexport default RedditDataList;\n","import React, { useState, useEffect } from \"react\";\nimport RedditDataList from \"../components/heatmap/RedditDataList\";\n\nconst FetchHeatmap = (props) => {\n  const [redditSubmissions, setRedditSubmissions] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const getHttpResponse = () => {\n    if (isLoading) return <p>Loading... </p>;\n    if (error) return <p>{error}</p>;\n    if (redditSubmissions) return <RedditDataList data={redditSubmissions} />;\n    return <p>Something went wrong... </p>;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    const clientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const clientLocale = Intl.DateTimeFormat().resolvedOptions().locale;\n\n    // get Reddit submission data from Reddit API\n    fetch(\n      `https://www.reddit.com/r/${props.subreddit}/top.json?t=month&limit=100`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data || data.length === 0) {\n          setIsLoading(false);\n          setRedditSubmissions(null);\n          return;\n        }\n        const redditData = data.data.children.map((item) => {\n          const postCreationDate = new Date(item.data.created_utc * 1000);\n\n          return {\n            subreddit: props.subreddit,\n            upvote_ratio: item.data.upvote_ratio,\n            unix_time: postCreationDate,\n            day: postCreationDate.getDay(),\n            date: postCreationDate\n              .toLocaleString(clientLocale, { timeZone: clientTimeZone })\n              .split(\", \")[0],\n            time: postCreationDate\n              .toLocaleString(clientLocale, { timeZone: clientTimeZone })\n              .split(\", \")[1],\n            hour:\n              postCreationDate\n                .toLocaleString(clientLocale, {\n                  timeZone: clientTimeZone,\n                  hour12: false,\n                })\n                .split(\", \")[1]\n                .split(\":\")[0] % 24,\n          };\n        });\n\n        redditData.sort((a, b) => b.upvote_ratio - a.upvote_ratio);\n        redditData.sort((a_1, b_1) => parseInt(a_1.hour) - parseInt(b_1.hour));\n        redditData.sort((a_2, b_2) => parseInt(a_2.day) - parseInt(b_2.day));\n\n        setIsLoading(false);\n        if (redditData) setRedditSubmissions(redditData);\n        else setRedditSubmissions(null);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setError(\n          `Error: No data available for subreddit: \"${props.subreddit}\"`\n        );\n      });\n  }, [props.subreddit]);\n\n  // send the subreddit search to the sever so we can track popular searches\n  useEffect(() => {\n    if (redditSubmissions && redditSubmissions.length > 0) {\n      fetch(\n        \"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            subreddit: redditSubmissions[0].subreddit.toLowerCase(),\n            count: 1,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n    }\n  }, [redditSubmissions]);\n\n  return getHttpResponse();\n};\n\nexport default FetchHeatmap;\n","import React from \"react\";\nimport styles from \"./PopularSearchList.module.css\";\n\nconst PopularSearchList = (props) => {\n  const getSubredditList = () => {\n    if (!props.data || props.data.length === 0) return <p>no data...</p>;\n    else {\n      return props.data.map((item) => (\n        <div\n          className={styles[\"popular-search-list__subreddit\"]}\n          key={item.subreddit}\n        >\n          {item.subreddit}\n        </div>\n      ));\n    }\n  };\n\n  return (\n    <div className={styles[\"popular-search-list\"]}>\n      <div className={styles[\"popular-search-list__heading\"]}>\n        Popular Searches\n      </div>\n      {getSubredditList()}\n    </div>\n  );\n};\n\nexport default PopularSearchList;\n","import React, { useState, useEffect } from \"react\";\nimport PopularSearchList from \"../components/PopularSearchList\";\n\nconst FetchPopularSearches = (props) => {\n  const [popularSearches, setPopularSearches] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const getHttpResponse = () => {\n    if (isLoading) return <p>Loading...</p>;\n    if (error) return <p>Something went wrong...</p>;\n    return <PopularSearchList data={popularSearches} />;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetch(\n      \"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data) {\n          setIsLoading(false);\n          return;\n        }\n\n        let subreddits = {};\n        for (const item of Object.entries(data)) {\n          const currSub = item[1].subreddit;\n          const currCnt = item[1].count;\n\n          if (!subreddits[currSub]) {\n            subreddits[currSub] = currCnt;\n          } else {\n            subreddits[currSub]++;\n          }\n        }\n\n        const popularSearches = Object.entries(subreddits).map((item) => {\n          let subreddit = item[0];\n          let count = item[1];\n          return { subreddit, count };\n        });\n\n        popularSearches.sort((a, b) => b.count - a.count);\n        popularSearches.splice(5, popularSearches.length);\n\n        setIsLoading(false);\n        setPopularSearches(popularSearches);\n      })\n      .catch((err) => setError(\"Something went wrong...\"));\n  }, [props.subreddit]);\n\n  return getHttpResponse();\n};\n\nexport default FetchPopularSearches;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Instructions from \"./components/Instructions\";\nimport SearchBar from \"./components/SearchBar\";\nimport FetchHeatmap from \"./http-requests/FetchHeatmap\";\nimport FetchPopularSearches from \"./http-requests/FetchPopularSearches\";\n\nconst App = () => {\n  const [subreddit, setSubreddit] = useState(null);\n\n  const onSubmitHandler = (sub) => {\n    setSubreddit(sub);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Instructions />\n      <SearchBar onSubmit={onSubmitHandler} />\n      {subreddit && <FetchHeatmap subreddit={subreddit} />}\n      <FetchPopularSearches subreddit={subreddit} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}