{"version":3,"sources":["components/Navbar.module.css","components/SearchBar.module.css","components/PopularSearchList.module.css","UI/Button.module.css","components/Instructions.module.css","components/Navbar.js","components/Instructions.js","UI/Button.js","components/SearchBar.js","components/RedditDataList.js","http-requests/FetchHeatMap.js","components/PopularSearchList.js","http-requests/FetchPopularSearches.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Navbar","className","styles","href","Instructions","Button","props","cssClasses","onClick","btnText","SearchBar","useState","subreddit","setSubreddit","onSubmit","event","preventDefault","toLowerCase","trim","htmlFor","type","id","name","placeholder","value","onChange","target","RedditDataList","dayHour","sun","Array","fill","mon","tue","wed","thr","fri","sat","data","item","day","parseInt","hour","map","i","FetchHeatMap","redditSubmissions","setRedditSubmissions","isLoading","setIsLoading","error","setError","useEffect","clientTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","clientLocale","locale","fetch","then","response","json","redditData","children","postCreationDate","Date","created_utc","upvote_ratio","unix_time","getDay","date","toLocaleString","split","time","hour12","sort","a","b","a_1","b_1","a_2","b_2","catch","err","method","body","JSON","stringify","count","headers","length","PopularSearchList","FetchPopularSearches","popularSearches","setPopularSearches","subreddits","Object","entries","currSub","currCnt","splice","App","sub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0905b31b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__31-FB\",\"navbar__logo\":\"Navbar_navbar__logo__2ou9Y\",\"navbar__title\":\"Navbar_navbar__title__3-7CC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar__label\":\"SearchBar_searchbar__label__1aEKd\",\"searchbar__input\":\"SearchBar_searchbar__input__1UQUp\",\"searchbar__btn\":\"SearchBar_searchbar__btn__9s5ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popular-search-list\":\"PopularSearchList_popular-search-list__1c3Fc\",\"popular-search-list__heading\":\"PopularSearchList_popular-search-list__heading__35FaZ\",\"popular-search-list__subreddit\":\"PopularSearchList_popular-search-list__subreddit__1gELa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__Liofu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"instructions\":\"Instructions_instructions__1imUA\"};","import React from \"react\";\nimport styles from \"./Navbar.module.css\";\n\nconst Navbar = () => {\n  return (\n    <div className={styles[\"navbar\"]}>\n      <div className={styles[\"navbar__logo\"]}>\n        <a href=\"/\">[LOGO]</a>\n      </div>\n      <div className={styles[\"navbar__title\"]}>Reddit Scraper App</div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styles from \"./Instructions.module.css\";\n\nconst Instructions = () => {\n  return (\n    <div className={styles[\"instructions\"]}>\n      Search for your favorite subreddit below to find the best times to post.\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport styles from \"./Button.module.css\";\n\nconst Button = (props) => {\n  const cssClasses = props.className\n    ? `${props.className} ${styles[\"btn\"]}`\n    : styles[\"btn\"];\n\n  return (\n    <button className={cssClasses} onClick={props.onClick}>\n      {props.btnText}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport styles from \"./SearchBar.module.css\";\n\nconst SearchBar = (props) => {\n  const [subreddit, setSubreddit] = useState(\"\");\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onSubmit(subreddit.toLowerCase().trim());\n    setSubreddit(\"\");\n  };\n\n  const subredditChangeHandler = (event) => {\n    setSubreddit(event.target.value);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <label className={styles[\"searchbar__label\"]} htmlFor=\"subreddit\">\n        www.reddit.com/r/\n      </label>\n      <input\n        className={styles[\"searchbar__input\"]}\n        type=\"text\"\n        id=\"subreddit\"\n        name=\"subreddit\"\n        placeholder=\"askreddit\"\n        value={subreddit}\n        onChange={subredditChangeHandler}\n      />\n      <Button\n        className={styles[\"searchbar__btn\"]}\n        btnText=\"Submit\"\n        type=\"submit\"\n      />\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst RedditDataList = (props) => {\n  let dayHour = {\n    sun: new Array(24).fill(0),\n    mon: new Array(24).fill(0),\n    tue: new Array(24).fill(0),\n    wed: new Array(24).fill(0),\n    thr: new Array(24).fill(0),\n    fri: new Array(24).fill(0),\n    sat: new Array(24).fill(0),\n  };\n\n  for (const item of props.data) {\n    if (item.day === 0) dayHour.sun[parseInt(item.hour, 10)]++;\n    else if (item.day === 1) dayHour.mon[parseInt(item.hour, 10)]++;\n    else if (item.day === 2) dayHour.tue[parseInt(item.hour, 10)]++;\n    else if (item.day === 3) dayHour.wed[parseInt(item.hour, 10)]++;\n    else if (item.day === 4) dayHour.thr[parseInt(item.hour, 10)]++;\n    else if (item.day === 5) dayHour.fri[parseInt(item.hour, 10)]++;\n    else if (item.day === 6) dayHour.sat[parseInt(item.hour, 10)]++;\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th></th>\n            <th>12 AM</th>\n            <th>1 AM</th>\n            <th>2 AM</th>\n            <th>3 AM</th>\n            <th>4 AM</th>\n            <th>5 AM</th>\n            <th>6 AM</th>\n            <th>7 AM</th>\n            <th>8 AM</th>\n            <th>9 AM</th>\n            <th>10 AM</th>\n            <th>11 AM</th>\n            <th>12 PM</th>\n            <th>1 PM</th>\n            <th>2 PM</th>\n            <th>3 PM</th>\n            <th>4 PM</th>\n            <th>5 PM</th>\n            <th>6 PM</th>\n            <th>7 PM</th>\n            <th>8 PM</th>\n            <th>9 PM</th>\n            <th>10 PM</th>\n            <th>11 PM</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Sunday</td>\n            {dayHour.sun.map((hour, i) => (\n              <td key={`0-${i}`}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Monday</td>\n            {dayHour.mon.map((hour, i) => (\n              <td key={`1-${i}`}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Tuesday</td>\n            {dayHour.tue.map((hour, i) => (\n              <td key={`2-${i}`}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Wednesday</td>\n            {dayHour.wed.map((hour, i) => (\n              <td key={`3-${i}`}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Thursday</td>\n            {dayHour.thr.map((hour, i) => (\n              <td key={`4-${i}`}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Friday</td>\n            {dayHour.fri.map((hour, i) => (\n              <td key={`5-${i}`}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Saturday</td>\n            {dayHour.sat.map((hour, i) => (\n              <td key={`6-${i}`}>{hour}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default RedditDataList;\n","import React, { useState, useEffect } from \"react\";\nimport RedditDataList from \"../components/RedditDataList\";\n\nconst FetchHeatMap = (props) => {\n  const [redditSubmissions, setRedditSubmissions] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const clientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const clientLocale = Intl.DateTimeFormat().resolvedOptions().locale;\n\n    fetch(\n      `https://www.reddit.com/r/${props.subreddit}/top.json?t=month&limit=100`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const redditData = data.data.children.map((item) => {\n          const postCreationDate = new Date(item.data.created_utc * 1000);\n\n          return {\n            subreddit: props.subreddit,\n            upvote_ratio: item.data.upvote_ratio,\n            unix_time: postCreationDate,\n            day: postCreationDate.getDay(),\n            date: postCreationDate\n              .toLocaleString(clientLocale, { timeZone: clientTimeZone })\n              .split(\", \")[0],\n            time: postCreationDate\n              .toLocaleString(clientLocale, { timeZone: clientTimeZone })\n              .split(\", \")[1],\n            hour:\n              postCreationDate\n                .toLocaleString(clientLocale, {\n                  timeZone: clientTimeZone,\n                  hour12: false,\n                })\n                .split(\", \")[1]\n                .split(\":\")[0] % 24,\n          };\n        });\n\n        redditData.sort((a, b) => b.upvote_ratio - a.upvote_ratio);\n        redditData.sort((a_1, b_1) => parseInt(a_1.hour) - parseInt(b_1.hour));\n        redditData.sort((a_2, b_2) => parseInt(a_2.day) - parseInt(b_2.day));\n\n        setIsLoading(false);\n        if (redditData) setRedditSubmissions(redditData);\n        else setRedditSubmissions(null);\n      })\n      .catch((err) => {\n        setError(\n          `Error: No data available for subreddit: \"${props.subreddit}\"`\n        );\n        setRedditSubmissions(null);\n      });\n  }, [props.subreddit]);\n\n  // send the subreddit search to the sever so we can track popular searches\n  useEffect(() => {\n    if (redditSubmissions) {\n      fetch(\n        \"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            subreddit: redditSubmissions[0].subreddit.toLowerCase(),\n            count: 1,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n    }\n  }, [redditSubmissions]);\n\n  if (redditSubmissions && redditSubmissions.length === 0)\n    return <p>No data... </p>;\n  if (redditSubmissions) return <RedditDataList data={redditSubmissions} />;\n  if (error) return <p>{error}</p>;\n  if (isLoading) return <p>Loading... </p>;\n\n  return <p>Something went wrong... </p>;\n};\n\nexport default FetchHeatMap;\n","import React from \"react\";\nimport styles from \"./PopularSearchList.module.css\";\n\nconst PopularSearchList = (props) => {\n  return (\n    <div className={styles[\"popular-search-list\"]}>\n      <div className={styles[\"popular-search-list__heading\"]}>\n        Popular Searches\n      </div>\n      {(!props.data || props.data.length === 0) && <p>no data...</p>}\n      {props.data.map((item) => (\n        <div\n          className={styles[\"popular-search-list__subreddit\"]}\n          key={item.subreddit}\n        >\n          {item.subreddit}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PopularSearchList;\n","import React, { useState, useEffect } from \"react\";\nimport PopularSearchList from \"../components/PopularSearchList\";\n\nconst FetchPopularSearches = (props) => {\n  const [popularSearches, setPopularSearches] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const getHttpResponse = () => {\n    if (isLoading) return <p>Loading...</p>;\n    if (error) return <p>Something went wrong...</p>;\n    if (!popularSearches) return <p>no data...</p>;\n    return <PopularSearchList data={popularSearches} />;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetch(\n      \"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data) {\n          setPopularSearches({});\n          setIsLoading(false);\n          return;\n        }\n\n        let subreddits = {};\n        Object.entries(data).map((item) => {\n          const currSub = item[1].subreddit;\n          const currCnt = item[1].count;\n\n          if (!subreddits[currSub]) {\n            subreddits[currSub] = currCnt;\n          } else {\n            subreddits[currSub]++;\n          }\n\n          return null;\n        });\n\n        const popularSearches = Object.entries(subreddits).map((item) => {\n          let subreddit = item[0];\n          let count = item[1];\n          return { subreddit, count };\n        });\n\n        popularSearches.sort((a, b) => b.count - a.count);\n        popularSearches.splice(5, popularSearches.length);\n\n        setIsLoading(false);\n        setPopularSearches(popularSearches);\n      })\n      .catch((err) => setError(\"Something went wrong...\"));\n  }, [props.subreddit]);\n\n  return getHttpResponse();\n};\n\nexport default FetchPopularSearches;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Instructions from \"./components/Instructions\";\nimport SearchBar from \"./components/SearchBar\";\nimport FetchHeatMap from \"./http-requests/FetchHeatMap\";\nimport FetchPopularSearches from \"./http-requests/FetchPopularSearches\";\n\nconst App = () => {\n  const [subreddit, setSubreddit] = useState(null);\n\n  const onSubmitHandler = (sub) => {\n    setSubreddit(sub);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Instructions />\n      <SearchBar onSubmit={onSubmitHandler} />\n      {subreddit && <FetchHeatMap subreddit={subreddit} />}\n      <FetchPopularSearches subreddit={subreddit} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}