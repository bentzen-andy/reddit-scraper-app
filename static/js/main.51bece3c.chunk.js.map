{"version":3,"sources":["components/SearchBar.module.css","components/Navbar.module.css","components/PopularSearchList.module.css","UI/Button.module.css","components/heatmap/GridSquare.module.css","components/Instructions.module.css","components/error-msg/ErrorMessage.module.css","components/error-msg/NoDataMessage.module.css","components/heatmap/HeatmapTitle.module.css","App.module.css","components/Navbar.js","components/Instructions.js","hooks/useInput.js","UI/Button.js","components/SearchBar.js","components/loading-spinners/TailSpin.js","components/error-msg/ErrorMessage.js","hooks/useScreenSize.js","components/heatmap/GridSquare.js","components/heatmap/HeatmapLandscapeStyle.js","components/heatmap/HeatmapPortraitStyle.js","components/error-msg/NoDataMessage.js","components/heatmap/RedditDataList.js","components/heatmap/HeatmapTitle.js","http-requests/FetchHeatmapData.js","components/HeatmapSearch.js","components/PopularSearchList.js","http-requests/FetchPopularSearches.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Navbar","className","styles","href","Instructions","useInput","checkValidity","useState","value","setValue","isTouched","setIsTouched","isValid","valueChangeHandler","event","target","valueBlurHandler","reset","Button","props","cssClasses","onClick","disabled","btnText","SearchBar","length","trim","enteredSubreddit","subredditIsValid","subredditIsTouched","subredditChangeHandler","subredditBlurHandler","resetSubreddit","subredditValidationText","inputStyles","onSubmit","preventDefault","toLowerCase","htmlFor","type","id","name","placeholder","onChange","onBlur","TailSpin","title","width","height","viewBox","xmlns","label","x1","y1","x2","y2","stopColor","color","stopOpacity","offset","fill","fillRule","transform","d","stroke","strokeWidth","attributeName","from","to","dur","repeatCount","cx","cy","r","radius","defaultProps","ErrorMessage","msg","getScreenSize","window","innerWidth","innerHeight","useScreenSize","screenSize","setScreenSize","useEffect","handleResize","addEventListener","removeEventListener","GridSquare","maxDailyPosts","postScore","numPosts","Math","round","getColor","HeatmapLandscapeStyle","dayHour","week","cellSpacing","cellPadding","border","map","hour","i","days","style","textAlign","day","j","HeatmapPortraitStyle","screenWidth","hourDay","Array","invertDayHour","hours","NoDataMessage","RedditDataList","push","data","item","parseInt","defineDayHourData","flat","reduce","a","b","max","HeatmapTitle","subreddit","FetchHeatmap","redditSubmissions","setRedditSubmissions","isLoading","setIsLoading","error","setError","getSubredditDate","postCreationDate","clientLocale","clientTimeZone","toLocaleString","timeZone","split","getSubredditTime","getSubredditHour","hour12","fetch","then","response","json","children","over_18","every","val","isExplicitContent","Intl","DateTimeFormat","resolvedOptions","locale","redditData","Date","created_utc","upvote_ratio","unix_time","getDay","date","time","catch","err","method","body","JSON","stringify","count","headers","Fragment","HeatmapSearch","setSubreddit","sub","onEnteredSubreddit","FetchHeatmapData","PopularSearchList","clickHandler","firstChild","console","log","onTouchEnd","FetchPopularSearches","popularSearches","setPopularSearches","subreddits","Object","entries","currSub","currCnt","getSubredditCounts","getArrayFromObject","sort","splice","App","handleSubreddit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,iBAAmB,oCAAoC,iBAAmB,oCAAoC,wBAAwB,yCAAyC,QAAU,2BAA2B,0BAA0B,2CAA2C,eAAiB,oC,gBCA5TD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,8BAA8B,yBAAyB,uCAAuC,aAAe,+B,gBCA/KD,EAAOC,QAAU,CAAC,sBAAsB,+CAA+C,+BAA+B,wDAAwD,iCAAiC,0DAA0D,+BAA+B,0D,kBCAxSD,EAAOC,QAAU,CAAC,IAAM,sB,gBCAxBD,EAAOC,QAAU,CAAC,cAAc,gCAAgC,UAAU,4BAA4B,UAAU,4BAA4B,UAAU,4BAA4B,UAAU,4BAA4B,UAAU,4BAA4B,UAAU,4BAA4B,UAAU,8B,iBCA9SD,EAAOC,QAAU,CAAC,aAAe,qC,gBCAjCD,EAAOC,QAAU,CAAC,aAAa,mC,iBCA/BD,EAAOC,QAAU,CAAC,IAAM,6B,gBCAxBD,EAAOC,QAAU,CAAC,MAAQ,8B,gBCA1BD,EAAOC,QAAU,CAAC,IAAM,mB,sICaTC,EAXA,WACb,OACE,sBAAKC,UAAWC,IAAM,OAAtB,UACE,mBAAGD,UAAWC,IAAO,0BAA2BC,KAAK,sBAArD,SACE,qBAAKF,UAAWC,IAAM,aAAtB,iBAEF,qBAAKD,UAAWC,IAAM,cAAtB,oC,iBCESE,EARM,WACnB,OACE,qBAAKH,UAAWC,IAAM,aAAtB,uFC2BWG,EA9BE,SAACC,GAChB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAUN,EAAcE,GAgB9B,MAAO,CACLA,QACAE,YACAE,UACAC,mBAlByB,SAACC,GAC1BL,EAASK,EAAMC,OAAOP,QAkBtBQ,iBAfuB,WACvBL,GAAa,IAebM,MAZY,WACPL,IACLH,EAAS,IACTE,GAAa,O,gBCJFO,EAZA,SAACC,GACd,IAAMC,EAAaD,EAAMlB,UAAN,UACZkB,EAAMlB,UADM,YACOC,IAAM,KAC5BA,IAAM,IAEV,OACE,wBAAQD,UAAWmB,EAAYC,QAASF,EAAME,QAASC,SAAUH,EAAMG,SAAvE,SACGH,EAAMI,W,gBCmDEC,EAxDG,SAACL,GACjB,MAOId,GAAS,SAACG,GAAD,OAA4B,IAAjBA,EAAMiB,QAAgBjB,EAAMkB,OAAOD,OAAS,KAN3DE,EADT,EACEnB,MACSoB,EAFX,EAEEhB,QACWiB,EAHb,EAGEnB,UACoBoB,EAJtB,EAIEjB,mBACkBkB,EALpB,EAKEf,iBACOgB,EANT,EAMEf,MASIgB,GACHL,GAAoBC,EACnB,qBAAK5B,UAAWC,IAAO,2BAAvB,6CAGE,KAEAgC,GACHN,GAAoBC,EAArB,UACO3B,IAAO,yBADd,YAC0CA,IAAM,SAC5CA,IAAO,yBAEb,OACE,uBAAMiC,SAnBc,SAACrB,GACrBA,EAAMsB,iBACNjB,EAAMgB,SAASR,EAAiBU,cAAcX,QAC9CM,KAgBA,UACE,uBAAO/B,UAAWC,IAAM,iBAAsBoC,QAAQ,YAAtD,+BAGA,sBAAKrC,UAAWC,IAAM,iBAAtB,UACG+B,EACD,uBACEhC,UAAWiC,EACXK,KAAK,OACLC,GAAG,YACHC,KAAK,YACLC,YAAY,YACZlC,MAAOmB,EACPgB,SAAUb,EACVc,OAAQb,OAGZ,cAAC,EAAD,CACE9B,UAAWC,IAAM,eACjBqB,QAAQ,SACRgB,KAAK,SACLjB,UAAWM,QCpBNiB,EAAW,SAAC1B,GAAD,OACtB,qBAAK2B,MAAM,kBAAX,SACE,sBACEC,MAAO5B,EAAM4B,MACbC,OAAQ7B,EAAM6B,OACdC,QAAQ,YACRC,MAAM,6BACN,aAAY/B,EAAMgC,MALpB,UAOE,+BACE,iCAAgBC,GAAG,SAASC,GAAG,KAAKC,GAAG,UAAUC,GAAG,UAAUf,GAAG,IAAjE,UACE,sBAAMgB,UAAWrC,EAAMsC,MAAOC,YAAY,IAAIC,OAAO,OACrD,sBAAMH,UAAWrC,EAAMsC,MAAOC,YAAY,OAAOC,OAAO,YACxD,sBAAMH,UAAWrC,EAAMsC,MAAOE,OAAO,cAGzC,mBAAGC,KAAK,OAAOC,SAAS,UAAxB,SACE,oBAAGC,UAAU,iBAAb,UACE,sBACEC,EAAE,8BACFvB,GAAG,SACHwB,OAAQ7C,EAAMsC,MACdQ,YAAY,IAJd,SAME,kCACEC,cAAc,YACd3B,KAAK,SACL4B,KAAK,UACLC,GAAG,YACHC,IAAI,OACJC,YAAY,iBAGhB,wBAAQV,KAAK,OAAOW,GAAG,KAAKC,GAAG,KAAKC,EAAGtD,EAAMuD,OAA7C,SACE,kCACER,cAAc,YACd3B,KAAK,SACL4B,KAAK,UACLC,GAAG,YACHC,IAAI,OACJC,YAAY,4BAS1BzB,EAAS8B,aAAe,CACtB3B,OAAQ,GACRD,MAAO,GACPU,MAAO,QACPiB,OAAQ,EACRvB,MAAO,iB,qBClFMyB,EAJM,SAACzD,GACpB,OAAO,qBAAKlB,UAAWC,IAAO,cAAvB,SAAuCiB,EAAM0D,O,QCFhDC,EAAgB,WACpB,MAAmDC,OACnD,MAAO,CACLhC,MAFF,EAAQiC,WAGNhC,OAHF,EAA2BiC,cAsBdC,EAfO,WACpB,MAAoC3E,mBAASuE,KAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAWA,OATAC,qBAAU,WACR,SAASC,IACPF,EAAcN,KAIhB,OADAC,OAAOQ,iBAAiB,SAAUD,GAC3B,kBAAMP,OAAOS,oBAAoB,SAAUF,MACjD,IAEIH,G,gBCKMM,EAxBI,SAACtE,GAKlB,IAUMsC,EAVW,WACf,GAA4B,IAAxBtC,EAAMuE,cAAqB,MAAO,UACtC,IAAIC,EAAYxE,EAAMyE,SAAW,EAKjC,OAHAD,GADAA,EAAaA,EAAYxE,EAAMuE,cAAiB,GACxB,GAAKC,EAAY,EAAI,EAAIA,EACjDA,EAAYE,KAAKC,MAAMH,GACZ,gBAAYA,GAIXI,GAEd,OACE,oBAAI9F,UAAS,UAAKC,IAAO,eAAZ,YAA8BA,IAAOuD,IAAlD,SACsB,IAAnBtC,EAAMyE,SAAiB,IAAMzE,EAAMyE,YCa3BI,EAhCe,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASP,EAAoB,EAApBA,cAClCQ,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAEhF,OACE,8BACE,wBAAOjG,UAAU,UAAUkG,YAAY,IAAIC,YAAY,IAAIC,OAAO,IAAlE,UACE,gCACE,+BACE,uBACCJ,EAAQ,GAAGK,KAAI,SAACC,EAAMC,GAAP,OACd,+BACE,8BAAMA,EAAI,KAAO,EAAI,GAAKA,EAAI,KAC9B,8BAAMA,EAAI,GAAK,KAAO,SAFfA,WAOf,gCACGP,EAAQK,KAAI,SAACG,EAAMD,GAAP,OACX,+BACE,oBAAIE,MAAO,CAAEC,UAAW,SAAxB,SAAoCT,EAAKM,KACxCC,EAAKH,KAAI,SAACM,EAAKC,GAAN,OACR,cAAC,EAAD,CAAoBjB,SAAUgB,EAAKlB,cAAeA,GAAjCmB,QAHZL,cCkDNM,EArEc,SAAC,GAA6C,IAA3Cb,EAA0C,EAA1CA,QAASc,EAAiC,EAAjCA,YAAarB,EAAoB,EAApBA,cA8C9CsB,EA7CgB,SAACf,GAErB,IADA,IAAIe,EAAU,IAAIC,MAAM,IACfT,EAAI,EAAGA,EAAIQ,EAAQvF,OAAQ+E,IAClCQ,EAAQR,GAAK,IAAIS,MAAM,GAAGrD,KAAK,GAGjC,IAAK,IAAI4C,EAAI,EAAGA,EAAIQ,EAAQvF,OAAQ+E,IAClC,IAAK,IAAIK,EAAI,EAAGA,EAAIG,EAAQR,GAAG/E,OAAQoF,IACrCG,EAAQR,GAAGK,GAAKZ,EAAQY,GAAGL,GAI/B,OAAOQ,EAiCOE,CAAcjB,GAE9B,OACE,8BACE,wBAAOhG,UAAU,UAAUkG,YAAY,IAAIC,YAAY,IAAIC,OAAO,IAAlE,UACE,gCAlCAU,GAAe,IAEf,+BACE,uBACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,wCAKF,+BACE,uBACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,wCAYF,gCACGC,EAAQV,KAAI,SAACa,EAAOX,GAAR,OACX,+BACE,+BACGA,EAAI,KAAO,EAAI,GAAKA,EAAI,GAD3B,IACgCA,EAAI,GAAK,KAAO,QAE/CW,EAAMb,KAAI,SAACC,EAAMM,GAAP,OACT,cAAC,EAAD,CAAoBjB,SAAUW,EAAMb,cAAeA,GAAlCmB,QALZL,c,iBClDNY,EAJO,WACpB,OAAO,qBAAKnH,UAAWC,IAAM,IAAtB,yBC2CMmH,EAzCQ,SAAClG,GACtB,MAA0B+D,IAAlBlC,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MAwBVkD,EAtBoB,WAExB,IADA,IAAIA,EAAU,GACLO,EAAI,EAAGA,EAAI,EAAGA,IACrBP,EAAQqB,KAAK,IAAIL,MAAM,IAAIrD,KAAK,IAHJ,oBAMXzC,EAAMoG,MANK,IAM9B,2BAA+B,CAAC,IAArBC,EAAoB,QACZ,IAAbA,EAAKZ,IAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,OAC7B,IAAbiB,EAAKZ,IAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,OAClC,IAAbiB,EAAKZ,IAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,OAClC,IAAbiB,EAAKZ,IAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,OAClC,IAAbiB,EAAKZ,IAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,OAClC,IAAbiB,EAAKZ,IAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,OAClC,IAAbiB,EAAKZ,KAAWX,EAAQ,GAAGwB,SAASD,EAAKjB,KAAM,QAb5B,8BAe9B,OAAON,EAOOyB,GACVhC,EAAuBO,EAJd0B,OAAOC,QAAO,SAACC,EAAGC,GAAJ,OAAUjC,KAAKkC,IAAIF,EAAGC,KAAI,GAcvD,OANAzC,qBAAU,WACR,OAAKlE,EAAMoG,MAA8B,IAAtBpG,EAAMoG,KAAK9F,OAC1BsB,EAAQC,EAAe,cAAC,EAAD,CAAuBiD,QAASA,EAAS8B,IAAKrC,IAC7D,cAAC,EAAD,CAAsBO,QAASA,EAASc,YAAahE,EAAO2C,cAAeA,IAFpC,cAAC,EAAD,MAGlD,CAAC1C,EAAQD,EAAOkD,EAAS9E,EAAMoG,KAAM7B,IAEnCvE,EAAMoG,MAA8B,IAAtBpG,EAAMoG,KAAK9F,OAC1BsB,EAAQC,EAAe,cAAC,EAAD,CAAuBiD,QAASA,EAASP,cAAeA,IACvE,cAAC,EAAD,CAAsBO,QAASA,EAASc,YAAahE,EAAO2C,cAAeA,IAFpC,cAAC,EAAD,K,iBC9BtCsC,EATM,SAAC7G,GACpB,OACE,sBAAKlB,UAAWC,IAAM,MAAtB,0DAEGiB,EAAM8G,cCyIEC,EA1IM,SAAC/G,GACpB,MAAkDZ,mBAAS,MAA3D,mBAAO4H,EAAP,KAA0BC,EAA1B,KACA,EAAkC7H,oBAAS,GAA3C,mBAAO8H,EAAP,KAAkBC,EAAlB,KACA,EAA0B/H,mBAAS,MAAnC,mBAAOgI,EAAP,KAAcC,EAAd,KAwBMC,EAAmB,SAACC,EAAkBC,EAAcC,GACxD,OAAOF,EACJG,eAAeF,EAAc,CAAEG,SAAUF,IACzCG,MAAM,MAAM,IAGXC,EAAmB,SAACN,EAAkBC,EAAcC,GACxD,OAAOF,EACJG,eAAeF,EAAc,CAAEG,SAAUF,IACzCG,MAAM,MAAM,IAGXE,EAAmB,SAACP,EAAkBC,EAAcC,GACxD,OACEF,EACGG,eAAeF,EAAc,CAC5BG,SAAUF,EACVM,QAAQ,IAETH,MAAM,MAAM,GACZA,MAAM,KAAK,GAAK,IAwFvB,OA5DA1D,qBAAU,WACHlE,EAAM8G,WAAwC,IAA3B9G,EAAM8G,UAAUxG,SACxC+G,EAAS,MACTF,GAAa,GAGba,MAAM,4BAAD,OAA6BhI,EAAM8G,UAAnC,gCACFmB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC7B,GAEL,GA3EoB,SAACA,GACzB,SAAKA,EAAKA,KAAKgC,UAA0C,IAA9BhC,EAAKA,KAAKgC,SAAS9H,SACvC8F,EAAKA,KAAKgC,SACdjD,KAAI,SAACkB,GAAD,OAAUA,EAAKD,KAAKiC,WACxBC,OAAM,SAACC,GAAD,OAAiB,IAARA,KAuEVC,CAAkBpC,GAGpB,OAFAe,GAAa,QACbE,EAAS,mEAKX,MApEG,CAAEI,eAFcgB,KAAKC,iBAAiBC,kBAAkBhB,SAEtCH,aADJiB,KAAKC,iBAAiBC,kBAAkBC,QAqEjDnB,EAAR,EAAQA,eAAgBD,EAAxB,EAAwBA,aAClBqB,EAAazC,EAAKA,KAAKgC,SAASjD,KAAI,SAACkB,GACzC,IAAMkB,EAAmB,IAAIuB,KAA6B,IAAxBzC,EAAKD,KAAK2C,aAC5C,MAAO,CACLjC,UAAW9G,EAAM8G,UACjBkC,aAAc3C,EAAKD,KAAK4C,aACxBC,UAAW1B,EACX9B,IAAK8B,EAAiB2B,SACtBC,KAAM7B,EAAiBC,EAAkBC,EAAcC,GACvD2B,KAAMvB,EAAiBN,EAAkBC,EAAcC,GACvDrC,KAAM0C,EAAiBP,EAAkBC,EAAcC,OAI3DN,GAAa,GACGF,EAAZ4B,GACsB,SAE3BQ,OAAM,SAACC,GACNnC,GAAa,GACbE,EAAS,4CAAD,OAA6CrH,EAAM8G,UAAnD,YAEX,CAAC9G,EAAM8G,YAMV5C,qBAAU,WACJ8C,GAAqBA,EAAkB1G,OAAS,GAClD0H,MAAM,yEAA0E,CAC9EuB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnB5C,UAAWE,EAAkB,GAAGF,UAAU5F,cAC1CyI,MAAO,IAETC,QAAS,CACP,eAAgB,wBAIrB,CAAC5C,IAEmBhH,EAAM8G,UA/EvBI,EAAkB,cAAC,EAAD,CAAU5E,MAAM,YAClC8E,EAAc,cAAC,EAAD,CAAc1D,IAAK0D,IACjCJ,EAEA,eAAC,IAAM6C,SAAP,WACE,cAAC,EAAD,CAAc/C,UAAW9G,EAAM8G,YAC/B,cAAC,EAAD,CAAgBV,KAAMY,OAIrB,cAAC,EAAD,CAActD,IAAK0D,KChDf0C,EApBO,SAAC9J,GACrB,MAAkCZ,mBAAS,IAA3C,mBAAO0H,EAAP,KAAkBiD,EAAlB,KAWA,OAJA7F,qBAAU,WACR6F,EAAa/J,EAAM8G,aAClB,CAAC9G,EAAM8G,YAGR,eAAC,IAAM+C,SAAP,WACE,cAAC,EAAD,CAAW7I,SAXS,SAACgJ,GACvBD,EAAaC,GACbhK,EAAMiK,mBAAmBD,MAUtBlD,GAAa,cAACoD,EAAD,CAAkBpD,UAAWA,Q,gBCiBlCqD,EAjCW,SAACnK,GACzB,IAAMoK,EAAe,SAACzK,GACpB,IAAImH,EACe,aAAfnH,EAAMyB,OAAqB0F,EAAYnH,EAAMC,OAAOyK,WAAWA,WAAWjE,MAC3D,UAAfzG,EAAMyB,OAAkB0F,EAAYnH,EAAMC,OAAOyK,WAAWjE,MAChEkE,QAAQC,IAAIzD,GACZ9G,EAAMiK,mBAAmBnD,IAmB3B,OACE,sBAAKhI,UAAWC,IAAO,uBAAvB,UACE,qBAAKD,UAAWC,IAAO,gCAAvB,8BAjBGiB,EAAMoG,MAA8B,IAAtBpG,EAAMoG,KAAK9F,OAGrBN,EAAMoG,KAAKjB,KAAI,SAACkB,GAAD,OACpB,qBACEvH,UAAWC,IAAO,kCAElByL,WAAYJ,EAHd,SAKE,sBAAMlK,QAASkK,EAAf,SAA8B/D,EAAKS,aAH9BT,EAAKS,cALP,mBAAGhI,UAAWC,IAAO,gCAArB,4BCsEE0L,EA/Ec,SAACzK,GAC5B,MAA8CZ,mBAAS,MAAvD,mBAAOsL,EAAP,KAAwBC,EAAxB,KACA,EAAkCvL,oBAAS,GAA3C,mBAAO8H,EAAP,KAAkBC,EAAlB,KACA,EAA0B/H,mBAAS,MAAnC,mBAAOgI,EAAP,KAAcC,EAAd,KAyEA,OAnBAnD,qBAAU,WACRiD,GAAa,GACba,MAAM,0EACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC7B,GACL,GAAKA,EAAL,CAIA,IAAIwE,EAzDiB,SAACxE,GAE1B,IADA,IAAIwE,EAAa,GACjB,MAAmBC,OAAOC,QAAQ1E,GAAlC,eAAyC,CAApC,IAAMC,EAAI,KACP0E,EAAU1E,EAAK,GAAGS,UAClBkE,EAAU3E,EAAK,GAAGsD,MAEnBiB,EAAWG,GAGdH,EAAWG,KAFXH,EAAWG,GAAWC,EAK1B,OAAOJ,EA6CcK,CAAmB7E,GAChCsE,EAvCiB,SAACE,GAO1B,OANsBC,OAAOC,QAAQF,GAAYzF,KAAI,SAACkB,GAGpD,MAAO,CAAES,UAFOT,EAAK,GAEDsD,MADRtD,EAAK,OAoCO6E,CAAmBN,GACzCF,EAAgBS,MAAK,SAACzE,EAAGC,GAAJ,OAAUA,EAAEgD,MAAQjD,EAAEiD,SAC3Ce,EAAgBU,OAAO,EAAGV,EAAgBpK,QAC1C6G,GAAa,GACbwD,EAAmBD,QARjBvD,GAAa,MAUhBkC,OAAM,SAACC,GAAD,OAASjC,EAAS,gCAC1B,IA/BGH,EAAkB,cAAC,EAAD,CAAU5E,MAAM,YAClC8E,EAAc,cAAC,EAAD,CAAc1D,IAAK0D,IAEnC,cAAC,EAAD,CACEhB,KAAMsE,EACNT,mBAAoBjK,EAAMiK,sB,iBC7BnBoB,EAjBH,WACV,MAAkCjM,mBAAS,MAA3C,mBAAO0H,EAAP,KAAkBiD,EAAlB,KAEMuB,EAAkB,SAAC9K,GACvBuJ,EAAavJ,IAGf,OACE,sBAAK1B,UAAWC,IAAM,IAAtB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAe+H,UAAWA,EAAWmD,mBAAoBqB,IACzD,cAAC,EAAD,CAAsBxE,UAAWA,EAAWmD,mBAAoBqB,QCPvDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.51bece3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar__label\":\"SearchBar_searchbar__label__1aEKd\",\"searchbar__input\":\"SearchBar_searchbar__input__1UQUp\",\"searchbar__input--box\":\"SearchBar_searchbar__input--box__ffnvL\",\"invalid\":\"SearchBar_invalid__202AO\",\"searchbar__input--error\":\"SearchBar_searchbar__input--error__3fk3J\",\"searchbar__btn\":\"SearchBar_searchbar__btn__9s5ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__31-FB\",\"navbar__title\":\"Navbar_navbar__title__3-7CC\",\"navbar__logo-container\":\"Navbar_navbar__logo-container__3oNuj\",\"navbar__logo\":\"Navbar_navbar__logo__2ou9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popular-search-list\":\"PopularSearchList_popular-search-list__1c3Fc\",\"popular-search-list__heading\":\"PopularSearchList_popular-search-list__heading__35FaZ\",\"popular-search-list__subreddit\":\"PopularSearchList_popular-search-list__subreddit__1gELa\",\"popular-search-list__no-data\":\"PopularSearchList_popular-search-list__no-data__y0bIb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__Liofu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid-square\":\"GridSquare_grid-square__cQ_Rq\",\"color-0\":\"GridSquare_color-0__1H8ex\",\"color-1\":\"GridSquare_color-1__2AOH0\",\"color-2\":\"GridSquare_color-2__3f6Tx\",\"color-3\":\"GridSquare_color-3__E6IfZ\",\"color-4\":\"GridSquare_color-4__1mIqN\",\"color-5\":\"GridSquare_color-5__2eI04\",\"color-6\":\"GridSquare_color-6__3aZJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"instructions\":\"Instructions_instructions__1imUA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error-text\":\"ErrorMessage_error-text__1C2R-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"msg\":\"NoDataMessage_msg__1EkxO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HeatmapTitle_title__1OAgH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","import React from \"react\";\nimport styles from \"./Navbar.module.css\";\n\nconst Navbar = () => {\n  return (\n    <div className={styles[\"navbar\"]}>\n      <a className={styles[\"navbar__logo-container\"]} href=\"/reddit-scraper-app\">\n        <div className={styles[\"navbar__logo\"]}>R</div>\n      </a>\n      <div className={styles[\"navbar__title\"]}>Reddit Scraper App</div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styles from \"./Instructions.module.css\";\n\nconst Instructions = () => {\n  return (\n    <div className={styles[\"instructions\"]}>\n      Search for your favorite subreddit below to find the best times to post.\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { useState } from \"react\";\n\nconst useInput = (checkValidity) => {\n  const [value, setValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const isValid = checkValidity(value);\n\n  const valueChangeHandler = (event) => {\n    setValue(event.target.value);\n  };\n\n  const valueBlurHandler = () => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    if (!isValid) return;\n    setValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value,\n    isTouched,\n    isValid,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n","import React from \"react\";\nimport styles from \"./Button.module.css\";\n\nconst Button = (props) => {\n  const cssClasses = props.className\n    ? `${props.className} ${styles[\"btn\"]}`\n    : styles[\"btn\"];\n\n  return (\n    <button className={cssClasses} onClick={props.onClick} disabled={props.disabled}>\n      {props.btnText}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport Button from \"../UI/Button\";\nimport styles from \"./SearchBar.module.css\";\n\nconst SearchBar = (props) => {\n  const {\n    value: enteredSubreddit,\n    isValid: subredditIsValid,\n    isTouched: subredditIsTouched,\n    valueChangeHandler: subredditChangeHandler,\n    valueBlurHandler: subredditBlurHandler,\n    reset: resetSubreddit,\n  } = useInput((value) => value.length === 0 || value.trim().length > 0);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onSubmit(enteredSubreddit.toLowerCase().trim());\n    resetSubreddit();\n  };\n\n  const subredditValidationText =\n    !subredditIsValid && subredditIsTouched ? (\n      <div className={styles[\"searchbar__input--error\"]}>\n        Please enter a valid subreddit.\n      </div>\n    ) : null;\n\n  const inputStyles =\n    !subredditIsValid && subredditIsTouched\n      ? `${styles[\"searchbar__input--box\"]} ${styles[\"invalid\"]}`\n      : styles[\"searchbar__input--box\"];\n\n  return (\n    <form onSubmit={submitHandler}>\n      <label className={styles[\"searchbar__label\"]} htmlFor=\"subreddit\">\n        www.reddit.com/r/\n      </label>\n      <div className={styles[\"searchbar__input\"]}>\n        {subredditValidationText}\n        <input\n          className={inputStyles}\n          type=\"text\"\n          id=\"subreddit\"\n          name=\"subreddit\"\n          placeholder=\"askreddit\"\n          value={enteredSubreddit}\n          onChange={subredditChangeHandler}\n          onBlur={subredditBlurHandler}\n        />\n      </div>\n      <Button\n        className={styles[\"searchbar__btn\"]}\n        btnText=\"Submit\"\n        type=\"submit\"\n        disabled={!subredditIsValid}\n      />\n    </form>\n  );\n};\n\nexport default SearchBar;\n","// Credit given to react-loader-spinner team for this implementation\n// https://github.com/mhnpd/react-loader-spinner\n// Copied from their repo on 11/25/2021\n// Note: I did not want to download another dependency in order to get\n// this loading spinner so I opted to just copy-paste this snippet here.\n// Copyright and license information is included below:\n\n// A short and simple permissive license with conditions only requiring\n// preservation of copyright and license notices. Licensed works, modifications,\n// and larger works may be distributed under different terms and without source code.\n\n// The MIT License (MIT)\n\n// Copyright (c) 2018 Mohan Pd.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React from \"react\";\n\nexport const TailSpin = (props) => (\n  <div title=\"loading-spinner\">\n    <svg\n      width={props.width}\n      height={props.height}\n      viewBox=\"0 0 38 38\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      aria-label={props.label}\n    >\n      <defs>\n        <linearGradient x1=\"8.042%\" y1=\"0%\" x2=\"65.682%\" y2=\"23.865%\" id=\"a\">\n          <stop stopColor={props.color} stopOpacity=\"0\" offset=\"0%\" />\n          <stop stopColor={props.color} stopOpacity=\".631\" offset=\"63.146%\" />\n          <stop stopColor={props.color} offset=\"100%\" />\n        </linearGradient>\n      </defs>\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1 1)\">\n          <path\n            d=\"M36 18c0-9.94-8.06-18-18-18\"\n            id=\"Oval-2\"\n            stroke={props.color}\n            strokeWidth=\"2\"\n          >\n            <animateTransform\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 18 18\"\n              to=\"360 18 18\"\n              dur=\"0.9s\"\n              repeatCount=\"indefinite\"\n            />\n          </path>\n          <circle fill=\"#fff\" cx=\"36\" cy=\"18\" r={props.radius}>\n            <animateTransform\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 18 18\"\n              to=\"360 18 18\"\n              dur=\"0.9s\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </g>\n      </g>\n    </svg>\n  </div>\n);\n\nTailSpin.defaultProps = {\n  height: 80,\n  width: 80,\n  color: \"green\",\n  radius: 1,\n  label: \"audio-loading\",\n};\n","import React from \"react\";\nimport styles from \"./ErrorMessage.module.css\";\n\nconst ErrorMessage = (props) => {\n  return <div className={styles[\"error-text\"]}>{props.msg}</div>;\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from \"react\";\n\nconst getScreenSize = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nconst useScreenSize = () => {\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n\n  useEffect(() => {\n    function handleResize() {\n      setScreenSize(getScreenSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nexport default useScreenSize;\n","import React from \"react\";\nimport styles from \"./GridSquare.module.css\";\n\nconst GridSquare = (props) => {\n  // ============================================================\n  // Helper Function\n  // Returns a string to be used as CSS class. CSS class defines cell color\n  // ------------------------------------------------------------\n  const getColor = () => {\n    if (props.maxDailyPosts === 0) return \"color-1\";\n    let postScore = props.numPosts / 1.0;\n    postScore = (postScore / props.maxDailyPosts) * 6;\n    postScore = postScore < 1 && postScore > 0 ? 1 : postScore;\n    postScore = Math.round(postScore);\n    const color = `color-${postScore}`;\n    return color;\n  };\n\n  const color = getColor();\n\n  return (\n    <td className={`${styles[\"grid-square\"]} ${styles[color]}`}>\n      {props.numPosts === 0 ? \"-\" : props.numPosts}\n    </td>\n  );\n};\n\nexport default GridSquare;\n","import React from \"react\";\nimport GridSquare from \"./GridSquare\";\n\nconst HeatmapLandscapeStyle = ({ dayHour, maxDailyPosts }) => {\n  const week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  return (\n    <div>\n      <table className=\"heatmap\" cellSpacing=\"0\" cellPadding=\"0\" border=\"0\">\n        <thead>\n          <tr>\n            <th></th>\n            {dayHour[0].map((hour, i) => (\n              <th key={i}>\n                <div>{i % 12 === 0 ? 12 : i % 12}</div>\n                <div>{i < 12 ? \"AM\" : \"PM\"}</div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {dayHour.map((days, i) => (\n            <tr key={i}>\n              <td style={{ textAlign: \"right\" }}>{week[i]}</td>\n              {days.map((day, j) => (\n                <GridSquare key={j} numPosts={day} maxDailyPosts={maxDailyPosts} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default HeatmapLandscapeStyle;\n","import React from \"react\";\nimport GridSquare from \"./GridSquare\";\n\nconst HeatmapPortraitStyle = ({ dayHour, screenWidth, maxDailyPosts }) => {\n  const invertDayHour = (dayHour) => {\n    let hourDay = new Array(24);\n    for (let i = 0; i < hourDay.length; i++) {\n      hourDay[i] = new Array(7).fill(0);\n    }\n\n    for (let i = 0; i < hourDay.length; i++) {\n      for (let j = 0; j < hourDay[i].length; j++) {\n        hourDay[i][j] = dayHour[j][i];\n      }\n    }\n\n    return hourDay;\n  };\n\n  const getDaysOfWeek = () => {\n    if (screenWidth >= 480) {\n      return (\n        <tr>\n          <th></th>\n          <th>Sun</th>\n          <th>Mon</th>\n          <th>Tue</th>\n          <th>Wed</th>\n          <th>Thr</th>\n          <th>Fri</th>\n          <th>Sat</th>\n        </tr>\n      );\n    } else {\n      return (\n        <tr>\n          <th></th>\n          <th>S</th>\n          <th>M</th>\n          <th>T</th>\n          <th>W</th>\n          <th>T</th>\n          <th>F</th>\n          <th>S</th>\n        </tr>\n      );\n    }\n  };\n\n  const hourDay = invertDayHour(dayHour);\n\n  return (\n    <div>\n      <table className=\"heatmap\" cellSpacing=\"0\" cellPadding=\"0\" border=\"0\">\n        <thead>{getDaysOfWeek()}</thead>\n        <tbody>\n          {hourDay.map((hours, i) => (\n            <tr key={i}>\n              <td>\n                {i % 12 === 0 ? 12 : i % 12} {i < 12 ? \"AM\" : \"PM\"}\n              </td>\n              {hours.map((hour, j) => (\n                <GridSquare key={j} numPosts={hour} maxDailyPosts={maxDailyPosts} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default HeatmapPortraitStyle;\n","import React from \"react\";\nimport styles from \"./NoDataMessage.module.css\";\n\nconst NoDataMessage = () => {\n  return <div className={styles[\"msg\"]}>No Data...</div>;\n};\n\nexport default NoDataMessage;\n","import React, { useEffect } from \"react\";\nimport useScreenSize from \"../../hooks/useScreenSize\";\nimport HeatmapLandscapeStyle from \"./HeatmapLandscapeStyle\";\nimport HeatmapPortraitStyle from \"./HeatmapPortraitStyle\";\nimport NoDataMessage from \"../error-msg/NoDataMessage\";\n\nconst RedditDataList = (props) => {\n  const { height, width } = useScreenSize();\n\n  const defineDayHourData = () => {\n    let dayHour = [];\n    for (let i = 0; i < 7; i++) {\n      dayHour.push(new Array(24).fill(0));\n    }\n\n    for (const item of props.data) {\n      if (item.day === 0) dayHour[0][parseInt(item.hour, 10)]++;\n      else if (item.day === 1) dayHour[1][parseInt(item.hour, 10)]++;\n      else if (item.day === 2) dayHour[2][parseInt(item.hour, 10)]++;\n      else if (item.day === 3) dayHour[3][parseInt(item.hour, 10)]++;\n      else if (item.day === 4) dayHour[4][parseInt(item.hour, 10)]++;\n      else if (item.day === 5) dayHour[5][parseInt(item.hour, 10)]++;\n      else if (item.day === 6) dayHour[6][parseInt(item.hour, 10)]++;\n    }\n    return dayHour;\n  };\n\n  const getMax = (arr2D) => {\n    return arr2D.flat().reduce((a, b) => Math.max(a, b), 0);\n  };\n\n  const dayHour = defineDayHourData();\n  const maxDailyPosts = getMax(dayHour);\n\n  // every time the screen size changes (e.g., user rotates iPad), check\n  // if screen is landscape or portrait and adjust heatmap table accordingly\n  useEffect(() => {\n    if (!props.data || props.data.length === 0) return <NoDataMessage />;\n    if (width > height) return <HeatmapLandscapeStyle dayHour={dayHour} max={maxDailyPosts} />;\n    else return <HeatmapPortraitStyle dayHour={dayHour} screenWidth={width} maxDailyPosts={maxDailyPosts} />;\n  }, [height, width, dayHour, props.data, maxDailyPosts]);\n\n  if (!props.data || props.data.length === 0) return <NoDataMessage />;\n  if (width > height) return <HeatmapLandscapeStyle dayHour={dayHour} maxDailyPosts={maxDailyPosts} />;\n  else return <HeatmapPortraitStyle dayHour={dayHour} screenWidth={width} maxDailyPosts={maxDailyPosts} />;\n};\n\nexport default RedditDataList;\n","import React from \"react\";\nimport styles from \"./HeatmapTitle.module.css\";\n\nconst HeatmapTitle = (props) => {\n  return (\n    <div className={styles[\"title\"]}>\n      Top rated Reddit posts for: www.reddit.com/r/\n      {props.subreddit}\n    </div>\n  );\n};\n\nexport default HeatmapTitle;\n","import React, { useState, useEffect } from \"react\";\nimport { TailSpin } from \"../components/loading-spinners/TailSpin\";\nimport ErrorMessage from \"../components/error-msg/ErrorMessage\";\nimport RedditDataList from \"../components/heatmap/RedditDataList\";\nimport HeatmapTitle from \"../components/heatmap/HeatmapTitle\";\n\nconst FetchHeatmap = (props) => {\n  const [redditSubmissions, setRedditSubmissions] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // ========================================\n  // Helper Function\n  // Determines if the posts in a given subreddit is exclusively\n  // made up of explicit material.\n  // ----------------------------------------\n  const isExplicitContent = (data) => {\n    if (!data.data.children || data.data.children.length === 0) return false;\n    return data.data.children\n      .map((item) => item.data.over_18)\n      .every((val) => val === true);\n  };\n\n  // ========================================\n  // Helper Functions\n  // The following determine date/time of reddit submissions.\n  // ----------------------------------------\n  const getClientTimezone = () => {\n    const clientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const clientLocale = Intl.DateTimeFormat().resolvedOptions().locale;\n    return { clientTimeZone, clientLocale };\n  };\n\n  const getSubredditDate = (postCreationDate, clientLocale, clientTimeZone) => {\n    return postCreationDate\n      .toLocaleString(clientLocale, { timeZone: clientTimeZone })\n      .split(\", \")[0];\n  };\n\n  const getSubredditTime = (postCreationDate, clientLocale, clientTimeZone) => {\n    return postCreationDate\n      .toLocaleString(clientLocale, { timeZone: clientTimeZone })\n      .split(\", \")[1];\n  };\n\n  const getSubredditHour = (postCreationDate, clientLocale, clientTimeZone) => {\n    return (\n      postCreationDate\n        .toLocaleString(clientLocale, {\n          timeZone: clientTimeZone,\n          hour12: false,\n        })\n        .split(\", \")[1]\n        .split(\":\")[0] % 24\n    );\n  };\n\n  // ========================================\n  // Helper Function\n  // Switch to determine what to render given state of the data from HTTP request.\n  // ----------------------------------------\n  const getHttpResponse = () => {\n    if (isLoading) return <TailSpin color=\"#6200ee\" />;\n    if (error) return <ErrorMessage msg={error} />;\n    if (redditSubmissions) {\n      return (\n        <React.Fragment>\n          <HeatmapTitle subreddit={props.subreddit} />\n          <RedditDataList data={redditSubmissions} />\n        </React.Fragment>\n      );\n    }\n    return <ErrorMessage msg={error} />;\n  };\n\n  // ========================================\n  // HTTP Request\n  // Gets data from Reddit API and refines it to display in a heatmap.\n  // Reddit data = top scoring submissions for a given subreddit.\n  // Data refinement = reduces it to name of subreddit and time of posting.\n  // ----------------------------------------\n  useEffect(() => {\n    if (!props.subreddit || props.subreddit.length === 0) return;\n    setError(null);\n    setIsLoading(true);\n\n    // get Reddit submission data from Reddit API\n    fetch(`https://www.reddit.com/r/${props.subreddit}/top.json?t=month&limit=100`)\n      .then((response) => response.json())\n      .then((data) => {\n        // deny searches for explicit content\n        if (isExplicitContent(data)) {\n          setIsLoading(false);\n          setError(\"Explicit content not allowed. Please try a different subreddit.\");\n          return;\n        }\n\n        // filter data down to subreddit and date/time info\n        const { clientTimeZone, clientLocale } = getClientTimezone();\n        const redditData = data.data.children.map((item) => {\n          const postCreationDate = new Date(item.data.created_utc * 1000);\n          return {\n            subreddit: props.subreddit,\n            upvote_ratio: item.data.upvote_ratio,\n            unix_time: postCreationDate,\n            day: postCreationDate.getDay(),\n            date: getSubredditDate(postCreationDate, clientLocale, clientTimeZone),\n            time: getSubredditTime(postCreationDate, clientLocale, clientTimeZone),\n            hour: getSubredditHour(postCreationDate, clientLocale, clientTimeZone),\n          };\n        });\n\n        setIsLoading(false);\n        if (redditData) setRedditSubmissions(redditData);\n        else setRedditSubmissions(null);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setError(`Error: No data available for subreddit: \"${props.subreddit}\"`);\n      });\n  }, [props.subreddit]);\n\n  // ========================================\n  // HTTP Request\n  // Sends the subreddit search to the sever so we can track popular searches\n  // ----------------------------------------\n  useEffect(() => {\n    if (redditSubmissions && redditSubmissions.length > 0) {\n      fetch(\"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          subreddit: redditSubmissions[0].subreddit.toLowerCase(),\n          count: 1,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    }\n  }, [redditSubmissions]);\n\n  return getHttpResponse(props.subreddit);\n};\n\nexport default FetchHeatmap;\n","import React, { useEffect, useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport FetchHeatmapData from \"../http-requests/FetchHeatmapData\";\n\nconst HeatmapSearch = (props) => {\n  const [subreddit, setSubreddit] = useState(\"\");\n\n  const onSubmitHandler = (sub) => {\n    setSubreddit(sub);\n    props.onEnteredSubreddit(sub);\n  };\n\n  useEffect(() => {\n    setSubreddit(props.subreddit);\n  }, [props.subreddit]);\n\n  return (\n    <React.Fragment>\n      <SearchBar onSubmit={onSubmitHandler} />\n      {subreddit && <FetchHeatmapData subreddit={subreddit} />}\n    </React.Fragment>\n  );\n};\n\nexport default HeatmapSearch;\n","import React from \"react\";\nimport styles from \"./PopularSearchList.module.css\";\n\nconst PopularSearchList = (props) => {\n  const clickHandler = (event) => {\n    let subreddit;\n    if (event.type === \"touchend\") subreddit = event.target.firstChild.firstChild.data;\n    if (event.type === \"click\") subreddit = event.target.firstChild.data;\n    console.log(subreddit);\n    props.onEnteredSubreddit(subreddit);\n  };\n\n  const getSubredditList = () => {\n    if (!props.data || props.data.length === 0)\n      return <p className={styles[\"popular-search-list__no-data\"]}>no data...</p>;\n    else {\n      return props.data.map((item) => (\n        <div\n          className={styles[\"popular-search-list__subreddit\"]}\n          key={item.subreddit}\n          onTouchEnd={clickHandler}\n        >\n          <span onClick={clickHandler}>{item.subreddit}</span>\n        </div>\n      ));\n    }\n  };\n\n  return (\n    <div className={styles[\"popular-search-list\"]}>\n      <div className={styles[\"popular-search-list__heading\"]}>Popular Searches</div>\n      {getSubredditList()}\n    </div>\n  );\n};\n\nexport default PopularSearchList;\n","import React, { useState, useEffect } from \"react\";\nimport { TailSpin } from \"../components/loading-spinners/TailSpin\";\nimport ErrorMessage from \"../components/error-msg/ErrorMessage\";\nimport PopularSearchList from \"../components/PopularSearchList\";\n\nconst FetchPopularSearches = (props) => {\n  const [popularSearches, setPopularSearches] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // ========================================\n  // Helper Function\n  // Processes data from the DB. Removes duplicates and gives counts.\n  // ----------------------------------------\n  const getSubredditCounts = (data) => {\n    let subreddits = {};\n    for (const item of Object.entries(data)) {\n      const currSub = item[1].subreddit;\n      const currCnt = item[1].count;\n\n      if (!subreddits[currSub]) {\n        subreddits[currSub] = currCnt;\n      } else {\n        subreddits[currSub]++;\n      }\n    }\n    return subreddits;\n  };\n\n  // ========================================\n  // Helper Function\n  // Turns object into an array so we can sort it.\n  // ----------------------------------------\n  const getArrayFromObject = (subreddits) => {\n    let popularSearches = Object.entries(subreddits).map((item) => {\n      let subreddit = item[0];\n      let count = item[1];\n      return { subreddit, count };\n    });\n\n    return popularSearches;\n  };\n\n  // ========================================\n  // Helper Function\n  // Switch to determine what to render given state of the data from HTTP request.\n  // ----------------------------------------\n  const getHttpResponse = () => {\n    if (isLoading) return <TailSpin color=\"#6200ee\" />;\n    if (error) return <ErrorMessage msg={error} />;\n    return (\n      <PopularSearchList\n        data={popularSearches}\n        onEnteredSubreddit={props.onEnteredSubreddit}\n      />\n    );\n  };\n\n  // ========================================\n  // HTTP Request\n  // Gets a list of popular searches to display to the user as suggestions.\n  // ----------------------------------------\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data) {\n          setIsLoading(false);\n          return;\n        }\n        let subreddits = getSubredditCounts(data);\n        let popularSearches = getArrayFromObject(subreddits);\n        popularSearches.sort((a, b) => b.count - a.count);\n        popularSearches.splice(5, popularSearches.length);\n        setIsLoading(false);\n        setPopularSearches(popularSearches);\n      })\n      .catch((err) => setError(\"Something went wrong...\"));\n  }, []);\n\n  return getHttpResponse();\n};\n\nexport default FetchPopularSearches;\n","import { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Instructions from \"./components/Instructions\";\nimport HeatmapSearch from \"./components/HeatmapSearch\";\nimport FetchPopularSearches from \"./http-requests/FetchPopularSearches\";\nimport styles from \"./App.module.css\";\n\nconst App = () => {\n  const [subreddit, setSubreddit] = useState(null);\n\n  const handleSubreddit = (enteredSubreddit) => {\n    setSubreddit(enteredSubreddit);\n  };\n\n  return (\n    <div className={styles[\"app\"]}>\n      <Navbar />\n      <Instructions />\n      <HeatmapSearch subreddit={subreddit} onEnteredSubreddit={handleSubreddit} />\n      <FetchPopularSearches subreddit={subreddit} onEnteredSubreddit={handleSubreddit} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}