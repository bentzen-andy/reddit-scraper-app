{"version":3,"sources":["components/SearchBar.js","components/RedditDataList.js","http-requests/FetchHeatMap.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","subreddit","setSubreddit","onSubmit","event","preventDefault","htmlFor","type","id","name","onChange","target","value","RedditDataList","dayHour","sunday","Array","fill","monday","tuesday","wednesday","thursday","friday","saturday","data","item","day","parseInt","hour","map","Math","random","FetchHeatMap","redditSubmissions","setRedditSubmissions","isLoading","setIsLoading","error","setError","useEffect","fetch","then","response","json","redditData","children","upvote_ratio","Date","created_utc","toLocaleString","timeZone","getDay","date","split","time","sort","a","b","a_1","b_1","a_2","b_2","catch","err","length","App","className","sub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.712e8a79.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst SearchBar = (props) => {\n  const [subreddit, setSubreddit] = useState(\"\");\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onSubmit(subreddit);\n  };\n\n  const subredditChangeHandler = (event) => {\n    setSubreddit(event.target.value);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <label htmlFor=\"subreddit\">Choose a subreddit: r/</label>\n      <input\n        type=\"text\"\n        id=\"subreddit\"\n        name=\"subreddit\"\n        onChange={subredditChangeHandler}\n      />\n      <button type=\"submit\" value=\"Submit\">\n        Submit\n      </button>\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst RedditDataList = (props) => {\n  let dayHour = {\n    sunday: new Array(24).fill(0),\n    monday: new Array(24).fill(0),\n    tuesday: new Array(24).fill(0),\n    wednesday: new Array(24).fill(0),\n    thursday: new Array(24).fill(0),\n    friday: new Array(24).fill(0),\n    saturday: new Array(24).fill(0),\n  };\n\n  for (const item of props.data) {\n    if (item.day === 0) dayHour.sunday[parseInt(item.hour, 10)]++;\n    if (item.day === 1) dayHour.monday[parseInt(item.hour, 10)]++;\n    if (item.day === 2) dayHour.tuesday[parseInt(item.hour, 10)]++;\n    if (item.day === 3) dayHour.wednesday[parseInt(item.hour, 10)]++;\n    if (item.day === 4) dayHour.thursday[parseInt(item.hour, 10)]++;\n    if (item.day === 5) dayHour.friday[parseInt(item.hour, 10)]++;\n    if (item.day === 6) dayHour.saturday[parseInt(item.hour, 10)]++;\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th></th>\n            <th>12 AM</th>\n            <th>1 AM</th>\n            <th>2 AM</th>\n            <th>3 AM</th>\n            <th>4 AM</th>\n            <th>5 AM</th>\n            <th>6 AM</th>\n            <th>7 AM</th>\n            <th>8 AM</th>\n            <th>9 AM</th>\n            <th>10 AM</th>\n            <th>11 AM</th>\n            <th>12 PM</th>\n            <th>1 PM</th>\n            <th>2 PM</th>\n            <th>3 PM</th>\n            <th>4 PM</th>\n            <th>5 PM</th>\n            <th>6 PM</th>\n            <th>7 PM</th>\n            <th>8 PM</th>\n            <th>9 PM</th>\n            <th>10 PM</th>\n            <th>11 PM</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Sunday</td>\n            {dayHour.sunday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Monday</td>\n            {dayHour.monday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Tuesday</td>\n            {dayHour.tuesday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Wednesday</td>\n            {dayHour.wednesday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Thursday</td>\n            {dayHour.thursday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Friday</td>\n            {dayHour.friday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Saturday</td>\n            {dayHour.saturday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default RedditDataList;\n","import React, { useState, useEffect } from \"react\";\nimport RedditDataList from \"../components/RedditDataList\";\n\nconst FetchHeatMap = (props) => {\n  const [redditSubmissions, setRedditSubmissions] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetch(\n      `https://www.reddit.com/r/${props.subreddit}/top.json?t=month&limit=100`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        let redditData = data.data.children.map((item) => ({\n          upvote_ratio: item.data.upvote_ratio,\n          // unix_time: new Date(item.data.created_utc * 1000),\n          day: new Date(\n            new Date(item.data.created_utc * 1000).toLocaleString(\"en-US\", {\n              timeZone: \"America/New_York\",\n            })\n          ).getDay(),\n          date: new Date(item.data.created_utc * 1000)\n            .toLocaleString(\"en-GB\", { timeZone: \"America/New_York\" })\n            .split(\", \")[0],\n          time: new Date(item.data.created_utc * 1000)\n            .toLocaleString(\"en-GB\", { timeZone: \"America/New_York\" })\n            .split(\", \")[1],\n          hour: new Date(item.data.created_utc * 1000)\n            .toLocaleString(\"en-GB\", { timeZone: \"America/New_York\" })\n            .split(\", \")[1]\n            .split(\":\")[0],\n        }));\n\n        redditData.sort((a, b) => b.upvote_ratio - a.upvote_ratio);\n        redditData.sort((a_1, b_1) => parseInt(a_1.hour) - parseInt(b_1.hour));\n        redditData.sort((a_2, b_2) => parseInt(a_2.day) - parseInt(b_2.day));\n        setRedditSubmissions(redditData);\n      })\n      .catch((err) => setError(\"Something went wrong...\"));\n  }, [props.subreddit]);\n\n  if (redditSubmissions && redditSubmissions.length === 0)\n    return <p>No data... </p>;\n  if (redditSubmissions) return <RedditDataList data={redditSubmissions} />;\n  if (error) return <p>{error}</p>;\n  if (isLoading) return <p>Loading... </p>;\n\n  return <p>Something went wrong... </p>;\n};\n\nexport default FetchHeatMap;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport FetchHeatMap from \"./http-requests/FetchHeatMap\";\n\nconst App = () => {\n  const [subreddit, setSubreddit] = useState(null);\n\n  const onSubmitHandler = (sub) => {\n    setSubreddit(sub);\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBar onSubmit={onSubmitHandler} />\n      {subreddit && <FetchHeatMap subreddit={subreddit} />}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}