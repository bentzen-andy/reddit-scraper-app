{"version":3,"sources":["components/Navbar.js","components/Instructions.js","components/SearchBar.js","components/RedditDataList.js","http-requests/FetchHeatMap.js","components/PopularSearchList.js","http-requests/FetchPopularSearches.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","Instructions","SearchBar","props","useState","subreddit","setSubreddit","onSubmit","event","preventDefault","htmlFor","type","id","name","onChange","target","value","RedditDataList","dayHour","sunday","Array","fill","monday","tuesday","wednesday","thursday","friday","saturday","data","item","day","parseInt","hour","map","Math","random","FetchHeatMap","redditSubmissions","setRedditSubmissions","isLoading","setIsLoading","error","setError","useEffect","fetch","then","response","json","redditData","children","upvote_ratio","Date","created_utc","toLocaleString","timeZone","getDay","date","split","time","sort","a","b","a_1","b_1","a_2","b_2","catch","err","method","body","JSON","stringify","count","headers","length","PopularSearchList","Fragment","FetchPopularSearches","popularSearches","setPopularSearches","popularSearchObject","key","arr","push","App","className","sub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aad6503a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = () => {\n  return <div>[LOGO] Reddit Scraper App</div>;\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Instructions = () => {\n  return (\n    <div>\n      Search for your favorite subreddit below to find the best times to post.\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React, { useState } from \"react\";\n\nconst SearchBar = (props) => {\n  const [subreddit, setSubreddit] = useState(\"\");\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onSubmit(subreddit);\n  };\n\n  const subredditChangeHandler = (event) => {\n    setSubreddit(event.target.value);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <label htmlFor=\"subreddit\">Choose a subreddit: r/</label>\n      <input\n        type=\"text\"\n        id=\"subreddit\"\n        name=\"subreddit\"\n        onChange={subredditChangeHandler}\n      />\n      <button type=\"submit\" value=\"Submit\">\n        Submit\n      </button>\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst RedditDataList = (props) => {\n  let dayHour = {\n    sunday: new Array(24).fill(0),\n    monday: new Array(24).fill(0),\n    tuesday: new Array(24).fill(0),\n    wednesday: new Array(24).fill(0),\n    thursday: new Array(24).fill(0),\n    friday: new Array(24).fill(0),\n    saturday: new Array(24).fill(0),\n  };\n\n  for (const item of props.data) {\n    if (item.day === 0) dayHour.sunday[parseInt(item.hour, 10)]++;\n    if (item.day === 1) dayHour.monday[parseInt(item.hour, 10)]++;\n    if (item.day === 2) dayHour.tuesday[parseInt(item.hour, 10)]++;\n    if (item.day === 3) dayHour.wednesday[parseInt(item.hour, 10)]++;\n    if (item.day === 4) dayHour.thursday[parseInt(item.hour, 10)]++;\n    if (item.day === 5) dayHour.friday[parseInt(item.hour, 10)]++;\n    if (item.day === 6) dayHour.saturday[parseInt(item.hour, 10)]++;\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th></th>\n            <th>12 AM</th>\n            <th>1 AM</th>\n            <th>2 AM</th>\n            <th>3 AM</th>\n            <th>4 AM</th>\n            <th>5 AM</th>\n            <th>6 AM</th>\n            <th>7 AM</th>\n            <th>8 AM</th>\n            <th>9 AM</th>\n            <th>10 AM</th>\n            <th>11 AM</th>\n            <th>12 PM</th>\n            <th>1 PM</th>\n            <th>2 PM</th>\n            <th>3 PM</th>\n            <th>4 PM</th>\n            <th>5 PM</th>\n            <th>6 PM</th>\n            <th>7 PM</th>\n            <th>8 PM</th>\n            <th>9 PM</th>\n            <th>10 PM</th>\n            <th>11 PM</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Sunday</td>\n            {dayHour.sunday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Monday</td>\n            {dayHour.monday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Tuesday</td>\n            {dayHour.tuesday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Wednesday</td>\n            {dayHour.wednesday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Thursday</td>\n            {dayHour.thursday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Friday</td>\n            {dayHour.friday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n          <tr>\n            <td>Saturday</td>\n            {dayHour.saturday.map((hour) => (\n              <td key={Math.random()}>{hour}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default RedditDataList;\n","import React, { useState, useEffect } from \"react\";\nimport RedditDataList from \"../components/RedditDataList\";\n\nconst FetchHeatMap = (props) => {\n  const [redditSubmissions, setRedditSubmissions] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetch(\n      `https://www.reddit.com/r/${props.subreddit}/top.json?t=month&limit=100`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        let redditData = data.data.children.map((item) => ({\n          upvote_ratio: item.data.upvote_ratio,\n          // unix_time: new Date(item.data.created_utc * 1000),\n          day: new Date(\n            new Date(item.data.created_utc * 1000).toLocaleString(\"en-US\", {\n              timeZone: \"America/New_York\",\n            })\n          ).getDay(),\n          date: new Date(item.data.created_utc * 1000)\n            .toLocaleString(\"en-GB\", { timeZone: \"America/New_York\" })\n            .split(\", \")[0],\n          time: new Date(item.data.created_utc * 1000)\n            .toLocaleString(\"en-GB\", { timeZone: \"America/New_York\" })\n            .split(\", \")[1],\n          hour: new Date(item.data.created_utc * 1000)\n            .toLocaleString(\"en-GB\", { timeZone: \"America/New_York\" })\n            .split(\", \")[1]\n            .split(\":\")[0],\n        }));\n\n        redditData.sort((a, b) => b.upvote_ratio - a.upvote_ratio);\n        redditData.sort((a_1, b_1) => parseInt(a_1.hour) - parseInt(b_1.hour));\n        redditData.sort((a_2, b_2) => parseInt(a_2.day) - parseInt(b_2.day));\n        if (redditData) setRedditSubmissions(redditData);\n        else setRedditSubmissions(null);\n      })\n      .catch((err) => setError(\"Something went wrong...\"));\n  }, [props.subreddit]);\n\n  // send the subreddit search to the sever so we can track popular searches\n  useEffect(() => {\n    if (redditSubmissions) {\n      fetch(\n        \"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({ subreddit: props.subreddit, count: 1 }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n    }\n  }, [props.subreddit, redditSubmissions]);\n\n  if (redditSubmissions && redditSubmissions.length === 0)\n    return <p>No data... </p>;\n  if (redditSubmissions) return <RedditDataList data={redditSubmissions} />;\n  if (error) return <p>{error}</p>;\n  if (isLoading) return <p>Loading... </p>;\n\n  return <p>Something went wrong... </p>;\n};\n\nexport default FetchHeatMap;\n","import React from \"react\";\n\nconst PopularSearchList = (props) => {\n  if (!props.data) return <p>no data...</p>;\n\n  return (\n    <React.Fragment>\n      <h1>Popular Searches</h1>\n\n      {props.data.map((item) => (\n        <p key={Math.random()}>\n          {item.subreddit}.....{item.count}\n        </p>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default PopularSearchList;\n","import React, { useState, useEffect } from \"react\";\nimport PopularSearchList from \"../components/PopularSearchList\";\n\nconst FetchPopularSearches = (props) => {\n  const [popularSearches, setPopularSearches] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetch(\n      \"https://reddit-scraper-app-default-rtdb.firebaseio.com/subreddits.json\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        let popularSearchObject = {};\n        for (let key in data) {\n          if (!popularSearchObject[data[key].subreddit]) {\n            popularSearchObject[data[key].subreddit] = data[key].count;\n          } else {\n            popularSearchObject[data[key].subreddit] =\n              popularSearchObject[data[key].subreddit] + 1;\n          }\n        }\n\n        let arr = [];\n        for (let key in popularSearchObject) {\n          arr.push({ subreddit: key, count: popularSearchObject[key] });\n        }\n        arr.sort((a, b) => b.count - a.count);\n\n        setPopularSearches(arr);\n      })\n      .catch((err) => setError(\"Something went wrong...\"));\n  }, [props.subreddit]);\n\n  if (popularSearches && popularSearches.length === 0)\n    return <p>No data... </p>;\n  if (popularSearches) return <PopularSearchList data={popularSearches} />;\n  if (error) return <p>{error}</p>;\n  if (isLoading) return <p>Loading... </p>;\n\n  return <p>Something went wrong... </p>;\n};\n\nexport default FetchPopularSearches;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Instructions from \"./components/Instructions\";\nimport SearchBar from \"./components/SearchBar\";\nimport FetchHeatMap from \"./http-requests/FetchHeatMap\";\nimport FetchPopularSearches from \"./http-requests/FetchPopularSearches\";\n\nconst App = () => {\n  const [subreddit, setSubreddit] = useState(null);\n\n  const onSubmitHandler = (sub) => {\n    setSubreddit(sub);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Instructions />\n      <SearchBar onSubmit={onSubmitHandler} />\n      {subreddit && <FetchHeatMap subreddit={subreddit} />}\n      <FetchPopularSearches subreddit={subreddit} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}